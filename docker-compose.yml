x-common-dns: &localstack-dns
  dns:
    - 10.0.2.20

x-aws-environment-variables: &aws-environment-variables
  AWS_REGION: eu-west-3
  AWS_ACCESS_KEY_ID: "000000000000"
  AWS_SECRET_ACCESS_KEY: "000000000000"
  AWS_ENDPOINT_URL_SNS: http://sns.eu-west-3.localhost.localstack.cloud:4566
  AWS_ENDPOINT_URL_SQS: http://sqs.eu-west-3.localhost.localstack.cloud:4566

x-dd-trace-environment-variables: &dd-trace-environment-variables
  DD_TRACE_AGENT_HOSTNAME: datadog
  DD_TRACE_AGENT_PORT: 8126
  DD_TRACE_LOG_INJECTION: true

x-polling-environment-variables: &polling-environment-variables
  POLLING_DELAY_MILLISECONDS: 5000

services:
  localstack:
    image: localstack/localstack:4.7
    environment:
      - SERVICES=sns,sqs
      - DEBUG=1
    ports:
      - "4566:4566"
    healthcheck:
      test: ["CMD", "python", "/localstack-healthcheck.py"]
      interval: 1s
      timeout: 2s
      retries: 40
    networks:
      default:
        ipv4_address: 10.0.2.20
    volumes:
      - ./localstack-healthcheck.py:/localstack-healthcheck.py:ro

  terraform-init:
    image: hashicorp/terraform:1.13.3
    working_dir: /workspace
    volumes:
      - ./terraform:/workspace
    entrypoint: ["terraform"]
    command: ["init"]

  terraform-apply:
    <<: *localstack-dns
    image: hashicorp/terraform:1.13.3
    depends_on:
      terraform-init:
        condition: service_completed_successfully
    working_dir: /workspace
    volumes:
      - ./terraform:/workspace
      - ./topology/topology.json:/workspace/topology.json:ro
    entrypoint: ["terraform"]
    command:
      - apply
      - "-auto-approve"
      - "-var=AWS_REGION=${AWS_REGION}"
      - "-var=AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
      - "-var=AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
      - "-var=AWS_ENDPOINT_URL_SNS=${AWS_ENDPOINT_URL_SNS}"
      - "-var=AWS_ENDPOINT_URL_SQS=${AWS_ENDPOINT_URL_SQS}"
    environment:
      <<: *aws-environment-variables

  first-microservice:
    container_name: first-microservice
    <<: *localstack-dns
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      localstack:
        condition: service_healthy
      terraform-apply:
        condition: service_completed_successfully
    environment:
      <<:
        [
          *aws-environment-variables,
          *dd-trace-environment-variables,
          *polling-environment-variables,
        ]
      ROLE: first
      MY_TOPIC: first-topic
      MY_QUEUE: first-queue
      DD_SERVICE: first-microservice

  second-microservice:
    container_name: second-microservice
    <<: *localstack-dns
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      localstack:
        condition: service_healthy
      terraform-apply:
        condition: service_completed_successfully
    environment:
      <<:
        [
          *aws-environment-variables,
          *dd-trace-environment-variables,
          *polling-environment-variables,
        ]
      ROLE: second
      MY_TOPIC: second-topic
      MY_QUEUE: second-queue
      DD_SERVICE: second-microservice

  datadog:
    image: "gcr.io/datadoghq/agent:7"
    environment:
      DD_API_KEY: ${DD_API_KEY}
      DD_SITE: datadoghq.eu
      DD_APM_NON_LOCAL_TRAFFIC: true
      DD_APM_ENABLED: true
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: true
      DD_RUNTIME_METRICS_ENABLED: true
      DD_PROCESS_AGENT_ENABLED: true
      DD_USE_DOGSTATSD: true
      DD_DOGSTATSD_PORT: 8125
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - 8126:8126
      - 8125:8125/udp

networks:
  default:
    name: localstacknet
    ipam:
      config:
        - subnet: 10.0.2.0/24
